@using MySql.Data.MySqlClient;
@using Dapper;

@page "/"

<PageTitle>Players</PageTitle>

<h1>Players List</h1>

<div class="row">
	<div class="col-8">
		<div class="players-cards">
			@foreach (var player in playersList)
			{
				<PlayerComponent Data=@player
							 IsSelected="(selectedPlayer != null && selectedPlayer.Id==player.Id)"
							 OnSelected="()=>SelectPlayer(player)"
							 OnDelete="() => RemovePlayer(player.Id)"
							 />
			}
		</div>
	</div>
	<div class="col-2">

		<div class="player-form">
			<p>Pour modifier un joueur cliquez sur sa carte.</p>

			<form>
				<div class="form-group">
					<label for="exampleInputEmail1">Firstname</label>
					<input @bind="firstnameInputText" type="text" class="form-control" id="exampleInputEmail1" placeholder="Enter firstname">
				</div>
				<div class="form-group">
					<label for="inputLastname">Lastname</label>
					<input @bind="lastnameInputText" type="text" class="form-control" id="inputLastname" placeholder="Lastname">
				</div>
				<div class="form-check">
					<input type="checkbox" checked="@genderInput" value="@genderInput" @onchange="GenderInputChanged" class="form-check-input" id="exampleCheck1">
					<label class="form-check-label" for="exampleCheck1">Is a Man ?</label>
				</div>
				<div class="form-group">
					<label for="inputSize">Size (cm)</label>
					<input @bind="sizeInput" type="number" min="100" max="230" class="form-control" id="inputSize" placeholder="Enter size in metter">
				</div>
				<div class="form-group">
					<label for="sportControlSelect">Sport</label>
					<select @bind="sportInput" class="form-control" id="sportControlSelect">
						<option></option>
						@foreach (var sport in sports)
						{
							<option>@sport</option>
						}
					</select>
				</div>

			</form>
			<div>
					<button @onclick="OnClickPhotoBtn" class="btn btn-primary" disabled="@(selectedPlayer == null)">Change Photo</button>
			</div>
			<button class="btn btn-outline-warning" @onclick="UpdateSelectedPlayer" disabled="@(selectedPlayer == null || !FormIsValid())">Update</button>
			<button class="btn btn-outline-success" @onclick="AddPlayer" disabled="@(!FormIsValid())">Add new player</button>
		</div>


	</div>
</div>


@code {
	private PlayerData? selectedPlayer;
	private List<PlayerData> playersList = new();

	private List<string> sports = new() { "Formula", "Golf", "Soccer", "Tennis", "US Football" };

	private string? firstnameInputText;
	private string? lastnameInputText;
	private int sizeInput = 100;

	public bool genderInput;

	private string sportInput = String.Empty;

	// TODO : Utiliser EntityFramework

	public static MySqlConnection connection;

	protected override async Task OnInitializedAsync()
	{
		sports.Sort();

		var config = new ConfigurationBuilder()
		.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
		.Build();

		var connectionString = config.GetConnectionString("DefaultConnection");
		connection = new MySqlConnection(connectionString);
		LoadPlayers();
	}


	private void GenderInputChanged(ChangeEventArgs e)
	{
		if(selectedPlayer != null)
		{
			// get the checkbox state
			//var value = e.Value;
			genderInput = (bool)e.Value;
			selectedPlayer.Man = genderInput;
			Console.WriteLine(selectedPlayer.Man);
			//Console.WriteLine("gender change ! : "+selectedPlayer.Man);
			selectedPlayer.ChangePhoto();
		}
	}

	private void AddPlayer()
	{
		try
		{

			connection.Open();

			var cmd = new MySqlCommand("INSERT INTO Players (firstname, lastname, size, man, photoIndex,sport) VALUES (@Firstname, @Lastname, @Size, @Man, @PhotoIndex,@Sport)", connection);
			cmd.Parameters.AddWithValue("@Firstname", firstnameInputText);
			cmd.Parameters.AddWithValue("@Lastname", lastnameInputText);
			cmd.Parameters.AddWithValue("@Size", sizeInput);
			cmd.Parameters.AddWithValue("@Man", genderInput);

			cmd.Parameters.AddWithValue("@Sport", sportInput);

			Random rnd = new Random();

			cmd.Parameters.AddWithValue("@PhotoIndex", rnd.Next(1, 6));

			cmd.ExecuteNonQuery();
			connection.Close();

		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}

		//playersList.Add(new PlayerData
		//	{
		//		Firstname = firstnameInputText,
		//		Lastname = lastnameInputText,
		//		Size = sizeInput,
		//		Man = genderInput,
		//	});

		LoadPlayers();

		firstnameInputText = string.Empty;
		lastnameInputText = string.Empty;
	}

	private void OnClickPhotoBtn()
	{
		selectedPlayer.ChangePhoto();
	}

	private void UpdateSelectedPlayer()
	{
		selectedPlayer.Firstname = firstnameInputText;
		selectedPlayer.Lastname = lastnameInputText;
		selectedPlayer.Man = genderInput;
		selectedPlayer.Size = sizeInput;
		selectedPlayer.Sport = sportInput;

		selectedPlayer.Update();
		LoadPlayers();
	}

	private void LoadPlayers()
	{
		connection.Open();
		playersList = connection.Query<PlayerData>("SELECT * FROM players ORDER By firstname").ToList();
		foreach (var item in playersList)
		{
			Console.WriteLine(item.Sport);
		}
		connection.Close();
	}

	private void SelectPlayer(PlayerData player)
	{
		selectedPlayer = player;
		firstnameInputText = selectedPlayer.Firstname;
		lastnameInputText = selectedPlayer.Lastname;
		sizeInput = selectedPlayer.Size;


		genderInput = selectedPlayer.Man;
		Console.WriteLine(selectedPlayer.Man);
		sportInput = selectedPlayer.Sport;

	}

	private void RemovePlayer(int playerId)
	{

		//connection.Open();

		//var sql = "DELETE FROM players WHERE id = @Id";
		//var affectedRows = connection.Execute(sql, new { Id = playerId });


		//if (affectedRows == 0)
		//{
		//	Console.WriteLine($"Player with ID {playerId} not found in the database.");
		//}
		//else
		//{
		//	Console.WriteLine($"Player with ID {playerId} has been deleted from the database.");
		//}

		//connection.Close();
		//playersList.Remove(player);

		selectedPlayer.Remove();
		selectedPlayer = null;

		LoadPlayers();
	}

	private bool FormIsValid()
	{
		return !string.IsNullOrWhiteSpace(firstnameInputText) && !string.IsNullOrWhiteSpace(lastnameInputText);
	}
}
